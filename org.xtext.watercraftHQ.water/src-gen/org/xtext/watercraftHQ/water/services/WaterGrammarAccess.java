/*
 * generated by Xtext 2.12.0
 */
package org.xtext.watercraftHQ.water.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WaterGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ComputerGameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.ComputerGame");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTypeParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//ComputerGame:
		//	elements+=Type*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Type*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Type
		public RuleCall getElementsTypeParserRuleCall_0() { return cElementsTypeParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLevelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHeroParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cItemParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Type:
		//	Level | Hero | Item;
		@Override public ParserRule getRule() { return rule; }
		
		//Level | Hero | Item
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Level
		public RuleCall getLevelParserRuleCall_0() { return cLevelParserRuleCall_0; }
		
		//Hero
		public RuleCall getHeroParserRuleCall_1() { return cHeroParserRuleCall_1; }
		
		//Item
		public RuleCall getItemParserRuleCall_2() { return cItemParserRuleCall_2; }
	}
	public class LevelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.Level");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLevelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldFieldParserRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//Level:
		//	'level' name=ID field=Field;
		@Override public ParserRule getRule() { return rule; }
		
		//'level' name=ID field=Field
		public Group getGroup() { return cGroup; }
		
		//'level'
		public Keyword getLevelKeyword_0() { return cLevelKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//field=Field
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }
		
		//Field
		public RuleCall getFieldFieldParserRuleCall_2_0() { return cFieldFieldParserRuleCall_2_0; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRectangleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRectangleRectangleParserRuleCall_1_0 = (RuleCall)cRectangleAssignment_1.eContents().get(0);
		private final Assignment cHerosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHerosHeroParserRuleCall_2_0 = (RuleCall)cHerosAssignment_2.eContents().get(0);
		private final Assignment cItemsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemsItemParserRuleCall_3_0 = (RuleCall)cItemsAssignment_3.eContents().get(0);
		
		//Field:
		//	'field' rectangle=Rectangle heros+=Hero items+=Item*;
		@Override public ParserRule getRule() { return rule; }
		
		//'field' rectangle=Rectangle heros+=Hero items+=Item*
		public Group getGroup() { return cGroup; }
		
		//'field'
		public Keyword getFieldKeyword_0() { return cFieldKeyword_0; }
		
		//rectangle=Rectangle
		public Assignment getRectangleAssignment_1() { return cRectangleAssignment_1; }
		
		//Rectangle
		public RuleCall getRectangleRectangleParserRuleCall_1_0() { return cRectangleRectangleParserRuleCall_1_0; }
		
		//heros+=Hero
		public Assignment getHerosAssignment_2() { return cHerosAssignment_2; }
		
		//Hero
		public RuleCall getHerosHeroParserRuleCall_2_0() { return cHerosHeroParserRuleCall_2_0; }
		
		//items+=Item*
		public Assignment getItemsAssignment_3() { return cItemsAssignment_3; }
		
		//Item
		public RuleCall getItemsItemParserRuleCall_3_0() { return cItemsItemParserRuleCall_3_0; }
	}
	public class RectangleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.Rectangle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRectangleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXINTTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Keyword cYKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cYAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cYINTTerminalRuleCall_4_0 = (RuleCall)cYAssignment_4.eContents().get(0);
		
		//Rectangle:
		//	'rectangle' 'X' X=INT 'Y' Y=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'rectangle' 'X' X=INT 'Y' Y=INT
		public Group getGroup() { return cGroup; }
		
		//'rectangle'
		public Keyword getRectangleKeyword_0() { return cRectangleKeyword_0; }
		
		//'X'
		public Keyword getXKeyword_1() { return cXKeyword_1; }
		
		//X=INT
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_2_0() { return cXINTTerminalRuleCall_2_0; }
		
		//'Y'
		public Keyword getYKeyword_3() { return cYKeyword_3; }
		
		//Y=INT
		public Assignment getYAssignment_4() { return cYAssignment_4; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_4_0() { return cYINTTerminalRuleCall_4_0; }
	}
	public class HeroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.Hero");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPositionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPositionPositionParserRuleCall_1_0 = (RuleCall)cPositionAssignment_1.eContents().get(0);
		private final Assignment cIsBossAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cIsBossIsBossKeyword_2_0 = (Keyword)cIsBossAssignment_2.eContents().get(0);
		
		//Hero:
		//	'hero' position=Position isBoss?='isBoss'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'hero' position=Position isBoss?='isBoss'?
		public Group getGroup() { return cGroup; }
		
		//'hero'
		public Keyword getHeroKeyword_0() { return cHeroKeyword_0; }
		
		//position=Position
		public Assignment getPositionAssignment_1() { return cPositionAssignment_1; }
		
		//Position
		public RuleCall getPositionPositionParserRuleCall_1_0() { return cPositionPositionParserRuleCall_1_0; }
		
		//isBoss?='isBoss'?
		public Assignment getIsBossAssignment_2() { return cIsBossAssignment_2; }
		
		//'isBoss'
		public Keyword getIsBossIsBossKeyword_2_0() { return cIsBossIsBossKeyword_2_0; }
	}
	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.Position");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXINTTerminalRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Keyword cYKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cYAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cYINTTerminalRuleCall_3_0 = (RuleCall)cYAssignment_3.eContents().get(0);
		
		//Position:
		//	'X' X=INT 'Y' Y=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'X' X=INT 'Y' Y=INT
		public Group getGroup() { return cGroup; }
		
		//'X'
		public Keyword getXKeyword_0() { return cXKeyword_0; }
		
		//X=INT
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_1_0() { return cXINTTerminalRuleCall_1_0; }
		
		//'Y'
		public Keyword getYKeyword_2() { return cYKeyword_2; }
		
		//Y=INT
		public Assignment getYAssignment_3() { return cYAssignment_3; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_3_0() { return cYINTTerminalRuleCall_3_0; }
	}
	public class ItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.Item");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cItemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAttackBonusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttackBonusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttackBonusINTTerminalRuleCall_3_0 = (RuleCall)cAttackBonusAssignment_3.eContents().get(0);
		private final Keyword cDefenseBonusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDefenseBonusAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefenseBonusINTTerminalRuleCall_5_0 = (RuleCall)cDefenseBonusAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cLocationAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cLocationPositionParserRuleCall_6_0_0 = (RuleCall)cLocationAssignment_6_0.eContents().get(0);
		private final Assignment cHeroAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final CrossReference cHeroHeroCrossReference_6_1_0 = (CrossReference)cHeroAssignment_6_1.eContents().get(0);
		private final RuleCall cHeroHeroIDTerminalRuleCall_6_1_0_1 = (RuleCall)cHeroHeroCrossReference_6_1_0.eContents().get(1);
		
		//Item:
		//	'item' name=ID 'attackBonus' attackBonus=INT 'defenseBonus' defenseBonus=INT (location=Position | hero=[Hero]);
		@Override public ParserRule getRule() { return rule; }
		
		//'item' name=ID 'attackBonus' attackBonus=INT 'defenseBonus' defenseBonus=INT (location=Position | hero=[Hero])
		public Group getGroup() { return cGroup; }
		
		//'item'
		public Keyword getItemKeyword_0() { return cItemKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'attackBonus'
		public Keyword getAttackBonusKeyword_2() { return cAttackBonusKeyword_2; }
		
		//attackBonus=INT
		public Assignment getAttackBonusAssignment_3() { return cAttackBonusAssignment_3; }
		
		//INT
		public RuleCall getAttackBonusINTTerminalRuleCall_3_0() { return cAttackBonusINTTerminalRuleCall_3_0; }
		
		//'defenseBonus'
		public Keyword getDefenseBonusKeyword_4() { return cDefenseBonusKeyword_4; }
		
		//defenseBonus=INT
		public Assignment getDefenseBonusAssignment_5() { return cDefenseBonusAssignment_5; }
		
		//INT
		public RuleCall getDefenseBonusINTTerminalRuleCall_5_0() { return cDefenseBonusINTTerminalRuleCall_5_0; }
		
		//location=Position | hero=[Hero]
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//location=Position
		public Assignment getLocationAssignment_6_0() { return cLocationAssignment_6_0; }
		
		//Position
		public RuleCall getLocationPositionParserRuleCall_6_0_0() { return cLocationPositionParserRuleCall_6_0_0; }
		
		//hero=[Hero]
		public Assignment getHeroAssignment_6_1() { return cHeroAssignment_6_1; }
		
		//[Hero]
		public CrossReference getHeroHeroCrossReference_6_1_0() { return cHeroHeroCrossReference_6_1_0; }
		
		//ID
		public RuleCall getHeroHeroIDTerminalRuleCall_6_1_0_1() { return cHeroHeroIDTerminalRuleCall_6_1_0_1; }
	}
	
	
	private final ComputerGameElements pComputerGame;
	private final TypeElements pType;
	private final LevelElements pLevel;
	private final FieldElements pField;
	private final RectangleElements pRectangle;
	private final HeroElements pHero;
	private final PositionElements pPosition;
	private final ItemElements pItem;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WaterGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pComputerGame = new ComputerGameElements();
		this.pType = new TypeElements();
		this.pLevel = new LevelElements();
		this.pField = new FieldElements();
		this.pRectangle = new RectangleElements();
		this.pHero = new HeroElements();
		this.pPosition = new PositionElements();
		this.pItem = new ItemElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.watercraftHQ.water.Water".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ComputerGame:
	//	elements+=Type*;
	public ComputerGameElements getComputerGameAccess() {
		return pComputerGame;
	}
	
	public ParserRule getComputerGameRule() {
		return getComputerGameAccess().getRule();
	}
	
	//Type:
	//	Level | Hero | Item;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Level:
	//	'level' name=ID field=Field;
	public LevelElements getLevelAccess() {
		return pLevel;
	}
	
	public ParserRule getLevelRule() {
		return getLevelAccess().getRule();
	}
	
	//Field:
	//	'field' rectangle=Rectangle heros+=Hero items+=Item*;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Rectangle:
	//	'rectangle' 'X' X=INT 'Y' Y=INT;
	public RectangleElements getRectangleAccess() {
		return pRectangle;
	}
	
	public ParserRule getRectangleRule() {
		return getRectangleAccess().getRule();
	}
	
	//Hero:
	//	'hero' position=Position isBoss?='isBoss'?;
	public HeroElements getHeroAccess() {
		return pHero;
	}
	
	public ParserRule getHeroRule() {
		return getHeroAccess().getRule();
	}
	
	//Position:
	//	'X' X=INT 'Y' Y=INT;
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//Item:
	//	'item' name=ID 'attackBonus' attackBonus=INT 'defenseBonus' defenseBonus=INT (location=Position | hero=[Hero]);
	public ItemElements getItemAccess() {
		return pItem;
	}
	
	public ParserRule getItemRule() {
		return getItemAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
