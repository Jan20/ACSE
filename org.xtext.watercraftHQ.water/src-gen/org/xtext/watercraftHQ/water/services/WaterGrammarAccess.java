/*
 * generated by Xtext 2.12.0
 */
package org.xtext.watercraftHQ.water.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WaterGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsComponentParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=Component*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=Component*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//Component
		public RuleCall getElementsComponentParserRuleCall_0() { return cElementsComponentParserRuleCall_0; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWaterClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWaterVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Component:
		//	WaterClass | WaterVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//WaterClass | WaterVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WaterClass
		public RuleCall getWaterClassParserRuleCall_0() { return cWaterClassParserRuleCall_0; }
		
		//WaterVariable
		public RuleCall getWaterVariableParserRuleCall_1() { return cWaterVariableParserRuleCall_1; }
	}
	public class WaterClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.WaterClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaterClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariablesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariablesWaterVariableParserRuleCall_3_0 = (RuleCall)cVariablesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//WaterClass:
		//	'waterClass' name=ID '{'
		//	variables+=WaterVariable*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'waterClass' name=ID '{' variables+=WaterVariable* '}'
		public Group getGroup() { return cGroup; }
		
		//'waterClass'
		public Keyword getWaterClassKeyword_0() { return cWaterClassKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//variables+=WaterVariable*
		public Assignment getVariablesAssignment_3() { return cVariablesAssignment_3; }
		
		//WaterVariable
		public RuleCall getVariablesWaterVariableParserRuleCall_3_0() { return cVariablesWaterVariableParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class WaterVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.WaterVariables");
		private final Assignment cWaterVariablesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWaterVariablesWaterVariableParserRuleCall_0 = (RuleCall)cWaterVariablesAssignment.eContents().get(0);
		
		//WaterVariables:
		//	waterVariables+=WaterVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//waterVariables+=WaterVariable
		public Assignment getWaterVariablesAssignment() { return cWaterVariablesAssignment; }
		
		//WaterVariable
		public RuleCall getWaterVariablesWaterVariableParserRuleCall_0() { return cWaterVariablesWaterVariableParserRuleCall_0; }
	}
	public class WaterVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.watercraftHQ.water.Water.WaterVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWaterVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//WaterVariable:
		//	'waterVariable' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'waterVariable' name=ID
		public Group getGroup() { return cGroup; }
		
		//'waterVariable'
		public Keyword getWaterVariableKeyword_0() { return cWaterVariableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final ComponentElements pComponent;
	private final WaterClassElements pWaterClass;
	private final WaterVariablesElements pWaterVariables;
	private final WaterVariableElements pWaterVariable;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WaterGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDomainmodel = new DomainmodelElements();
		this.pComponent = new ComponentElements();
		this.pWaterClass = new WaterClassElements();
		this.pWaterVariables = new WaterVariablesElements();
		this.pWaterVariable = new WaterVariableElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.watercraftHQ.water.Water".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=Component*;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//Component:
	//	WaterClass | WaterVariable;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//WaterClass:
	//	'waterClass' name=ID '{'
	//	variables+=WaterVariable*
	//	'}';
	public WaterClassElements getWaterClassAccess() {
		return pWaterClass;
	}
	
	public ParserRule getWaterClassRule() {
		return getWaterClassAccess().getRule();
	}
	
	//WaterVariables:
	//	waterVariables+=WaterVariable;
	public WaterVariablesElements getWaterVariablesAccess() {
		return pWaterVariables;
	}
	
	public ParserRule getWaterVariablesRule() {
		return getWaterVariablesAccess().getRule();
	}
	
	//WaterVariable:
	//	'waterVariable' name=ID;
	public WaterVariableElements getWaterVariableAccess() {
		return pWaterVariable;
	}
	
	public ParserRule getWaterVariableRule() {
		return getWaterVariableAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
