/*
 * generated by Xtext 2.12.0
 */
package org.xtext.watercraftHQ.water.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.watercraftHQ.water.services.WaterGrammarAccess;
import org.xtext.watercraftHQ.water.water.Domainmodel;
import org.xtext.watercraftHQ.water.water.WaterClass;
import org.xtext.watercraftHQ.water.water.WaterPackage;
import org.xtext.watercraftHQ.water.water.WaterVariable;
import org.xtext.watercraftHQ.water.water.WaterVariables;

@SuppressWarnings("all")
public class WaterSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WaterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WaterPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WaterPackage.DOMAINMODEL:
				sequence_Domainmodel(context, (Domainmodel) semanticObject); 
				return; 
			case WaterPackage.WATER_CLASS:
				sequence_WaterClass(context, (WaterClass) semanticObject); 
				return; 
			case WaterPackage.WATER_VARIABLE:
				sequence_WaterVariable(context, (WaterVariable) semanticObject); 
				return; 
			case WaterPackage.WATER_VARIABLES:
				sequence_WaterVariables(context, (WaterVariables) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Domainmodel returns Domainmodel
	 *
	 * Constraint:
	 *     elements+=Component+
	 */
	protected void sequence_Domainmodel(ISerializationContext context, Domainmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns WaterClass
	 *     WaterClass returns WaterClass
	 *
	 * Constraint:
	 *     (name=ID variables+=WaterVariable*)
	 */
	protected void sequence_WaterClass(ISerializationContext context, WaterClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Component returns WaterVariable
	 *     WaterVariable returns WaterVariable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_WaterVariable(ISerializationContext context, WaterVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WaterPackage.Literals.COMPONENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WaterPackage.Literals.COMPONENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWaterVariableAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     WaterVariables returns WaterVariables
	 *
	 * Constraint:
	 *     waterVariables+=WaterVariable
	 */
	protected void sequence_WaterVariables(ISerializationContext context, WaterVariables semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
