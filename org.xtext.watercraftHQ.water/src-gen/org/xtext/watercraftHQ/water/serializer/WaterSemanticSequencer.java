/*
 * generated by Xtext 2.12.0
 */
package org.xtext.watercraftHQ.water.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.watercraftHQ.water.services.WaterGrammarAccess;
import org.xtext.watercraftHQ.water.water.ComputerGame;
import org.xtext.watercraftHQ.water.water.Field;
import org.xtext.watercraftHQ.water.water.Hero;
import org.xtext.watercraftHQ.water.water.Item;
import org.xtext.watercraftHQ.water.water.Level;
import org.xtext.watercraftHQ.water.water.Position;
import org.xtext.watercraftHQ.water.water.Rectangle;
import org.xtext.watercraftHQ.water.water.WaterPackage;

@SuppressWarnings("all")
public class WaterSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WaterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WaterPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WaterPackage.COMPUTER_GAME:
				sequence_ComputerGame(context, (ComputerGame) semanticObject); 
				return; 
			case WaterPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case WaterPackage.HERO:
				sequence_Hero(context, (Hero) semanticObject); 
				return; 
			case WaterPackage.ITEM:
				sequence_Item(context, (Item) semanticObject); 
				return; 
			case WaterPackage.LEVEL:
				sequence_Level(context, (Level) semanticObject); 
				return; 
			case WaterPackage.POSITION:
				sequence_Position(context, (Position) semanticObject); 
				return; 
			case WaterPackage.RECTANGLE:
				sequence_Rectangle(context, (Rectangle) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ComputerGame returns ComputerGame
	 *
	 * Constraint:
	 *     elements+=Type+
	 */
	protected void sequence_ComputerGame(ISerializationContext context, ComputerGame semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (rectangle=Rectangle heros+=Hero items+=Item*)
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Hero
	 *     Hero returns Hero
	 *
	 * Constraint:
	 *     (position=Position isBoss?='isBoss'?)
	 */
	protected void sequence_Hero(ISerializationContext context, Hero semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Item
	 *     Item returns Item
	 *
	 * Constraint:
	 *     (name=ID attackBonus=INT defenseBonus=INT (location=Position | hero=[Hero|ID]))
	 */
	protected void sequence_Item(ISerializationContext context, Item semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Level
	 *     Level returns Level
	 *
	 * Constraint:
	 *     (name=ID field=Field)
	 */
	protected void sequence_Level(ISerializationContext context, Level semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WaterPackage.Literals.LEVEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WaterPackage.Literals.LEVEL__NAME));
			if (transientValues.isValueTransient(semanticObject, WaterPackage.Literals.LEVEL__FIELD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WaterPackage.Literals.LEVEL__FIELD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLevelAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLevelAccess().getFieldFieldParserRuleCall_2_0(), semanticObject.getField());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Position returns Position
	 *
	 * Constraint:
	 *     (X=INT Y=INT)
	 */
	protected void sequence_Position(ISerializationContext context, Position semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WaterPackage.Literals.POSITION__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WaterPackage.Literals.POSITION__X));
			if (transientValues.isValueTransient(semanticObject, WaterPackage.Literals.POSITION__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WaterPackage.Literals.POSITION__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPositionAccess().getXINTTerminalRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getPositionAccess().getYINTTerminalRuleCall_3_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Rectangle returns Rectangle
	 *
	 * Constraint:
	 *     (X=INT Y=INT)
	 */
	protected void sequence_Rectangle(ISerializationContext context, Rectangle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WaterPackage.Literals.RECTANGLE__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WaterPackage.Literals.RECTANGLE__X));
			if (transientValues.isValueTransient(semanticObject, WaterPackage.Literals.RECTANGLE__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WaterPackage.Literals.RECTANGLE__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRectangleAccess().getXINTTerminalRuleCall_2_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getRectangleAccess().getYINTTerminalRuleCall_4_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
}
