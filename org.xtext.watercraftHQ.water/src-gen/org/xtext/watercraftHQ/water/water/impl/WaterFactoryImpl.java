/**
 * generated by Xtext 2.12.0
 */
package org.xtext.watercraftHQ.water.water.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.watercraftHQ.water.water.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class WaterFactoryImpl extends EFactoryImpl implements WaterFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static WaterFactory init()
  {
    try
    {
      WaterFactory theWaterFactory = (WaterFactory)EPackage.Registry.INSTANCE.getEFactory(WaterPackage.eNS_URI);
      if (theWaterFactory != null)
      {
        return theWaterFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new WaterFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WaterFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case WaterPackage.DOMAINMODEL: return createDomainmodel();
      case WaterPackage.COMPONENT: return createComponent();
      case WaterPackage.WATER_CLASS: return createWaterClass();
      case WaterPackage.WATER_VARIABLES: return createWaterVariables();
      case WaterPackage.WATER_VARIABLE: return createWaterVariable();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domainmodel createDomainmodel()
  {
    DomainmodelImpl domainmodel = new DomainmodelImpl();
    return domainmodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WaterClass createWaterClass()
  {
    WaterClassImpl waterClass = new WaterClassImpl();
    return waterClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WaterVariables createWaterVariables()
  {
    WaterVariablesImpl waterVariables = new WaterVariablesImpl();
    return waterVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WaterVariable createWaterVariable()
  {
    WaterVariableImpl waterVariable = new WaterVariableImpl();
    return waterVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WaterPackage getWaterPackage()
  {
    return (WaterPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static WaterPackage getPackage()
  {
    return WaterPackage.eINSTANCE;
  }

} //WaterFactoryImpl
