/*
 * generated by Xtext 2.12.0
 */
grammar InternalWater;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.watercraftHQ.water.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.watercraftHQ.water.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.watercraftHQ.water.services.WaterGrammarAccess;

}
@parser::members {
	private WaterGrammarAccess grammarAccess;

	public void setGrammarAccess(WaterGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel
:
{ before(grammarAccess.getDomainmodelRule()); }
	 ruleDomainmodel
{ after(grammarAccess.getDomainmodelRule()); } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
		(rule__Domainmodel__ElementsAssignment)*
		{ after(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComponent
entryRuleComponent
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComponentAccess().getAlternatives()); }
		(rule__Component__Alternatives)
		{ after(grammarAccess.getComponentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWaterClass
entryRuleWaterClass
:
{ before(grammarAccess.getWaterClassRule()); }
	 ruleWaterClass
{ after(grammarAccess.getWaterClassRule()); } 
	 EOF 
;

// Rule WaterClass
ruleWaterClass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaterClassAccess().getGroup()); }
		(rule__WaterClass__Group__0)
		{ after(grammarAccess.getWaterClassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWaterVariable
entryRuleWaterVariable
:
{ before(grammarAccess.getWaterVariableRule()); }
	 ruleWaterVariable
{ after(grammarAccess.getWaterVariableRule()); } 
	 EOF 
;

// Rule WaterVariable
ruleWaterVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWaterVariableAccess().getGroup()); }
		(rule__WaterVariable__Group__0)
		{ after(grammarAccess.getWaterVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Component__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComponentAccess().getWaterClassParserRuleCall_0()); }
		ruleWaterClass
		{ after(grammarAccess.getComponentAccess().getWaterClassParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getComponentAccess().getWaterVariableParserRuleCall_1()); }
		ruleWaterVariable
		{ after(grammarAccess.getComponentAccess().getWaterVariableParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WaterClass__Group__0__Impl
	rule__WaterClass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaterClassAccess().getWaterClassKeyword_0()); }
	'waterClass'
	{ after(grammarAccess.getWaterClassAccess().getWaterClassKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WaterClass__Group__1__Impl
	rule__WaterClass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaterClassAccess().getNameAssignment_1()); }
	(rule__WaterClass__NameAssignment_1)
	{ after(grammarAccess.getWaterClassAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WaterClass__Group__2__Impl
	rule__WaterClass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaterClassAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getWaterClassAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WaterClass__Group__3__Impl
	rule__WaterClass__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaterClassAccess().getVariablesAssignment_3()); }
	(rule__WaterClass__VariablesAssignment_3)*
	{ after(grammarAccess.getWaterClassAccess().getVariablesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WaterClass__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaterClassAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getWaterClassAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WaterVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WaterVariable__Group__0__Impl
	rule__WaterVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaterVariableAccess().getWaterVariableKeyword_0()); }
	'waterVariable'
	{ after(grammarAccess.getWaterVariableAccess().getWaterVariableKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WaterVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWaterVariableAccess().getNameAssignment_1()); }
	(rule__WaterVariable__NameAssignment_1)
	{ after(grammarAccess.getWaterVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Domainmodel__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainmodelAccess().getElementsComponentParserRuleCall_0()); }
		ruleComponent
		{ after(grammarAccess.getDomainmodelAccess().getElementsComponentParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaterClassAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getWaterClassAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterClass__VariablesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaterClassAccess().getVariablesWaterVariableParserRuleCall_3_0()); }
		ruleWaterVariable
		{ after(grammarAccess.getWaterClassAccess().getVariablesWaterVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WaterVariable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWaterVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getWaterVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
